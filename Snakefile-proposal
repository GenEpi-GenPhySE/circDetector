# snakemake -p cow-liver-B004/R1.Chimeric.out.junction cow-liver-B004/R2.Chimeric.out.junction --until all

# imports:
import pandas as pd

configfile: "config.yaml"


def sample_chimeric_function_files(wildcards):
    mapdirs = sample_units[sample_units["sample"] == wildcards.sample]['mapdir']
    chim_files = []
    for mapdir in mapdirs:
        chim_files.append(os.path.join(mapdir, "se", wildcards.read,
                          "Chimeric.out.junction"))
    ### Whe should here make sure that the files actually exists
    return chim_files

def get_sample_species_annotation(wildcards):
    species = sample_units[sample_units["sample"] == wildcards.sample]["species"][0]
    if species not in config['annotation']:
        print("Warning the species %s is absent from aconfig file" % species)
        exit(1)
    return config['annotation'][species]

# absolute path here before switching to the working directory
SAMPLE_FILE = os.path.realpath(config['samples'])

sample_units = pd.read_table(SAMPLE_FILE).set_index("sample_unit", drop=False)
samples = set(sample_units['sample'])
tols= [0, 2, 5, 10]
min_cr = 1

# Wildcard constraints
wildcard_constraints:
    sample="|".join(samples),
    reads="R1|R2"

workdir: config['wdir']

rule all:
   input:
       "mapping_stats.tsv",
       "annotation_stats.tsv",
       "notebook.done"


rule detection:
    input:
        R1="{sample}/R1.Chimeric.out.junction",
        R2="{sample}/R2.Chimeric.out.junction"
    output:
        "{sample}/circrnas.bed"
    log:
        stdout = "logs/{sample}_detection.o",
        stderr = "logs/{sample}_detection.e"
    shell:
        "python3 ../scripts/circRNA_detection.py -r1 {input.R1} -r2 {input.R2}"
        " -min_cr {min_cr} -fmt bed -o {output} 1>{log.stdout} 2>{log.stderr}"


rule mergechimeric:
    input:
        sample_chimeric_function_files
    output:
        temp("{sample}/{read}.Chimeric.out.junction")
    shell:
        "cat {input} > {output}"


rule annotation:
    input:
        circrnas="{sample}/circrnas.bed",
        annotation=get_sample_species_annotation
    output:
        "{sample}/circrnas_annotation.tsv"
    log:
        stdout = "logs/{sample}_annotation.o",
        stderr = "logs/{sample}_annotation.e"
    shell:
        "python3 ../scripts/circRNA_annotation.py -circ {input.circrnas}"
        " -annot {input.annotation} -fmt bed -o {output} "
        " 1>{log.stdout} 2>{log.stderr}"


rule annotationstats:
    input:
        "{sample}/circrnas_annotation.tsv"
    output:
        "{sample}/annotation_stats.tsv"
    log:
        stdout = "logs/{sample}_stat_annotation.o",
        stderr = "logs/{sample}_stat_annotation.e"
    shell:
        "python3 ../scripts/stats_annotation.py -i {input} -o {output}"
        " 1>{log.stdout} 2>{log.stderr}"


rule mergeannotationstats:
    input:
        expand("{sample}/annotation_stats.tsv", sample=samples)
    output:
        "annotation_stats.tsv"
    shell:
        "cat {input} > {output}"


rule mappingstats:
    input:
        SAMPLE_FILE
    output:
        "mapping_stats.tsv"
    log:
        stdout = "logs/mapping_stats.o",
        stderr = "logs/mapping_stats.e"
    shell:
        "python3 ../scripts/mapping_stats.py -i {input} -o {output}"
        " 1>{log.stdout} 2>{log.stderr}"

rule mappingnotebook:
    input:
        "mapping_stats.tsv"
    output:
        touch("notebook.done")
    log:
        # optional path to the processed notebook
        notebook = "logs/notebooks/mapping_stats.ipynb"
    notebook:
        "notebooks/mapping_stats.ipynb"
